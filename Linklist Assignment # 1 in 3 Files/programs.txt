Question # 1
===========================================

#include<iostream>
#include<stdlib.h>
#include<string>
using namespace std;
void create_list(string , string , string);
void addatbeg(string, string, string);
void del(string);
void display();

struct node
{
	string name, assignto, date;
	struct node *link;
}*start;



int main()
{
	int choice,n;
	string m,as,d;
	
	start=NULL;
	while(1)
	{
		cout<<"1. Create List"<<endl;
		cout<<"2. Display"<<endl;
		cout<<"3. Add at beginning"<<endl;
		cout<<"4. Delete"<<endl;
		cout<<"5. Quit"<<endl;

		cout<<"Enter ur choice"<<endl;
		cin>>choice;
		switch(choice)
		{
			case 1:
				cout<<"How many Data u want:"<<endl;
				cin>>n;
			    
				for(int i=0;i<n;i++)
				{
					cin.ignore();
					cout<<"----------------------------------------------------"<<endl;
					cout<<"Enter the Name "<<endl;
					getline(cin,m);
					cout<<"Enter the Date  "<<endl;
					getline(cin,d);
					cout<<"Enter the Assignto "<<endl;
					getline(cin,as);
					create_list(m,d,as);
				}
				break;
			case 3:
				
				cin.ignore();
				    cout<<"Enter the data of new node: "<<endl;
					cout<<"Enter the Name "<<endl;
					getline(cin,m);
					cout<<"Enter the Date  "<<endl;
					getline(cin,d);
					cout<<"Enter the Assignto "<<endl;
					getline(cin,as);
				    addatbeg(m,d,as);
				break;


			case 4:
				if(start==NULL)
				{
					cout<<"Data is not available"<<endl;
					continue;
				}
				cout<<"Enter the element for deletion"<<endl;
				cin>>m;
				del(m);
				break;
			case 2:
				display();
				break;

			default:
				cout<<"Wrong choice"<<endl;
		}
	}
}

void create_list(string name,string date , string assignto)
{
	struct node *q,*tmp;
	tmp=new(struct node);
	tmp->name=name;
	tmp->date=date;
	tmp->assignto=assignto;
	tmp->link=NULL;

	if(start==NULL)	
	  start=tmp;	
	else    
	{
		q=start;
		while(q->link!=NULL) 	
		{
		    q=q->link;
	    }
		q->link=tmp;
	}
}

void addatbeg(string name, string assignto, string date)
{
	struct node *tmp;
	tmp=new(struct node);
	tmp->name=name;
	tmp->assignto=assignto;
	tmp->date=date;
	tmp->link=start;
	start=tmp;
}


void del(string name)
{
	struct node *tmp,*q;
	if(start->name == name)
	{
		tmp=start;
		start=start->link;
		delete(tmp);
		return;
	}
	q=start;
	while(q->link->link!=NULL)
	{
		if(q->link->name==name)	       
		{
			tmp=q->link;
			q->link=tmp->link;
			free(tmp);
			return;
		}
		q=q->link;
	}
	if(q->link->name==name)	
	{
		tmp=q->link;
		free(tmp);
		q->link=NULL;
		return;
	}
	cout<<"Element "<<name<<" not found"<<endl;
}

void display()
{
	struct node *q;
	if(start==NULL)
	{
		cout<<"List is empty"<<endl;
		return;
	}
	q=start;
	cout<<"List is:"<<endl;
	while(q!=NULL)
	{
		cout<<"------------Displayed Data----------- "<<endl;
		cout<<q->name<<"   "<<endl;
		cout<<q->date<<"   "<<endl;
		cout<<q->assignto<<"   "<<endl;
		q=q->link;
	}
	cout<<endl;
}

======================================================================
Question # 4
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <iostream>
#include <cstdlib>
#include <string>
using namespace std;

struct node {
    string name, sclass, addr;
    int roll_no;
    struct node *next, *prev;
} *start;

void createlist(string name, int roll_no, string sclass, string addr);
void addtolistbeg(string name, int roll_no, string sclass, string addr);
void addtolistafter(string name, int roll_no, string sclass, string addr, int pos);
void remove(string name);
void sortList();
void DisplayList();
void search(string name);

void createlist(string name, int roll_no, string sclass, string addr) {
    struct node *tmp, *q;
    tmp = new node();
    tmp->name = name;
    tmp->roll_no = roll_no;
    tmp->sclass = sclass;
    tmp->addr = addr;
    tmp->prev = NULL;
    tmp->next = NULL;
    if (start == NULL)
        start = tmp;
    else {
        q=start;
        while(q->next!=NULL)	q=q->next;
        q->next=tmp;
        tmp->prev=q;
    }
}

void addtolistbeg(string name, int roll_no, string sclass, string addr) {
    struct node *tmp;
    tmp = new node();
    tmp->name = name;
    tmp->roll_no = roll_no;
    tmp->sclass = sclass;
    tmp->addr = addr;
    start->prev = tmp;
    tmp->next = tmp;
    start = tmp;
}

//void addtolistafter(string name, int roll_no, string sclass, string addr, int pos) {
//    struct node *newnode, *temp;
//    int i = 1, count = 0;
//    temp = head;
//    while (temp != NULL) {
//        temp = temp->next;
//        count++;
//    }
//    if (pos <= 0 || pos > count + 1) {
//        cout << "Invalid Position." << endl;
//    } else {
//        temp = head;
//        newnode = new node();
//        while (i < pos) {
//            temp = temp->next;
//            i++;
//        }
//        newnode->prev = temp;
//        newnode->next = temp->next;
//        if(temp->next!=NULL)
//        {
//        	temp->next->prev=newnode;
//		}
//        temp->next = newnode;
//    }
//}
//
void remove(string name) {
    int i = 1;
    struct node *tmp, *q, *prev;
    bool deleted = false;
    if (start == NULL) {
        cout << "List is Empty." << endl;
        return;
    }
    while (start != NULL && start->name == name) {
        tmp = start;
        start = start->next;
        free(tmp);
        deleted = true;
    }
    q = start;
    prev = NULL;
    while (q != NULL) {
        if (q->name == name) {
            tmp = q;
            if (prev != NULL) {
                prev->next = q->next; // Update the previous node's link to skip the current node
            }
            q = q->next; // Move to the next node
            delete (tmp);
            deleted = true;
        } else {
            prev = q;
            q = q->next;
        }
    }
    if (!deleted) {
        cout << "Name " << name << " not found" << endl;
    }
}

void sortList() {
    struct node *i, *j, *q;
    q = start;
    string tempName, tempClass, tempAddr;
    int tempRoll_no;

    for (i = start; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->name > j->name) {
                // Swap data
                tempName = i->name;
                tempRoll_no = i->roll_no;
                tempClass = i->sclass;
                tempAddr = i->addr;

                i->name = j->name;
                i->roll_no = j->roll_no;
                i->sclass = j->sclass;
                i->addr = j->addr;

                j->name = tempName;
                j->roll_no = tempRoll_no;
                j->sclass = tempClass;
                j->addr = tempAddr;
            }
        }
    }
}

void DisplayList() {
    struct node *q;
    q = start;

    while (q != NULL) {
        cout << "Student Name: " << q->name << " , Roll Number: " << q->roll_no
             << " ,Class/Section: " << q->sclass << " ,Address: " << q->addr << endl;
        q = q->next;
    }
}

void search(string name) {
    struct node *q;
    q = start;
    bool found = false;
    while (q != NULL) {
        if (q->name == name) {
            found = true;
            cout << "Student found." << endl;
            cout << "Student Name: " << q->name << ", Roll Number: " << q->roll_no
                 << ", Class/Section: " << q->sclass << ", Address: " << q->addr << endl;
            break;
        }
        q = q->next;
    }
    if (!found) {
        cout << "Student with name " << name << " not found." << endl;
    }
}

int main() {
    int choice, roll_no, k, n, pos;
    string name, sclass, addr, m, p;
    start = NULL;

    while (1) {
        cout << "1.Create the list of the students." << endl;
        cout << "2.Add the student at the beginning of the list." << endl;
//        cout << "3.Add the student after another student position in the list." << endl;
        cout << "3.Delete a student record from the list." << endl;
        cout << "4.Display Student list(alphabetically)." << endl;
        cout << "5. Search Student from the list." << endl;
        cout << "6. Exit" << endl;

        cout << "Enter your choice" << endl;
        cin >> choice;

        if (choice == 6) {
            break; // Exit the loop if the user chooses option 7
        }

        switch (choice) {
            case 1:
                cout << "How many students you want to add in list?" << endl;
                cin >> n;
                cin.ignore();
                for (k = 0; k < n; k++) {
                    cout << "Enter Name of the student " << k + 1 << " :";
                    getline(cin, name);
                    cout << "Enter Roll Number of " << name << ":";
                    cin >> roll_no;
                    cin.ignore();
                    cout << "Enter Class/Section:";
                    getline(cin, sclass);
                    cout << "Enter Address:";
                    getline(cin, addr);
                    createlist(name, roll_no, sclass, addr);
                }
                break;
			            case 2:
                cin.ignore();
                cout << "Enter Name of the student " << k + 1 << " :";
                getline(cin, name);
                cout << "Enter Roll Number of " << name << ":";
                cin >> roll_no;
                cin.ignore();
                cout << "Enter Class/Section:";
                getline(cin, sclass);
                cout << "Enter Address:";
                getline(cin, addr);
                addtolistbeg(name, roll_no, sclass, addr);
                break;
//            case 3:
//                cin.ignore();
//                cout << "Enter Name of the student " << k + 1 << " :";
//                getline(cin, name);
//                cout << "Enter Roll Number of " << name << ":";
//                cin >> roll_no;
//                cin.ignore();
//                cout << "Enter Class/Section:";
//                getline(cin, sclass);
//                cout << "Enter Address:";
//                getline(cin, addr);
//                cout << "Enter the position after which this student's data is inserted" << endl;
//                cin >> pos;
//                addtolistafter(name, roll_no, sclass, addr, pos);
//                break;
            case 3:
                if (start == NULL) {
                    cout << "List is empty" << endl;
                    continue;
                }
                cout << "Enter Student's name for deletion" << endl;
                cin >> m;
                remove(m);
                break;
            case 4:
                sortList();
                DisplayList();
                break;
            case 5:
                if (start == NULL) {
                    cout << "List is empty" << endl;
                    continue;
                }
                cout << "Enter student name to be searched in the list:";
                cin >> p;
                search(p);
                break;
            default:
                cout << "Invalid choice. Please enter a valid option." << endl;
        }
    }

    
}


=====================================================================================
Question # 5 
==================================================================================

#include<iostream>
#include<cstdlib>
using namespace std;
void create_playlist(string, string, string);
void addatend(string, string, string);
void del(string);
void display_forw();
void display_back();
struct node
{
	struct node *prev;
	string name, artist, genre;
	struct node *next;
}*start, *end;

int main()
{
	int choice,n;
	string name, artist, genre, sd;
	start=NULL;
	while(1)
	{
		cout<<"1. Create List"<<endl;
		cout<<"2. Add song at the end"<<endl;
		cout<<"3. Delete"<<endl;
		cout<<"4. Display the playlist in forward way"<<endl;
		cout<<"5. Display the playlist in backward way"<<endl;
		cout<<"6. Quit"<<endl;

		cout<<"Enter ur choice"<<endl;
		cin>>choice;
		switch(choice)
		{
			case 1:
				cout<<"How many dongs you want to add: "<<endl;
				cin>>n;
				cin.ignore();
				for(int i=0; i<n; i++)
				{
					cout<<"Enter the name of the song "<<endl;
					getline(cin,name);
					cout<<"Enter the artist name  "<<endl;
					getline(cin,artist);
					cout<<"Enter the genre of the song "<<endl;
					getline(cin,genre);
					create_playlist(name, artist, genre);
				}
				break;
			case 2:
				cin.ignore();
				cout<<"Enter the name of the song you want to add at the end of the playlist  "<<endl;
				getline(cin,name);
				cout<<" Enter the name of the artist "<<endl;
				getline(cin,artist);
				cout<<"Enter the genre of song "<<endl;
				getline(cin,genre);
				addatend(name, artist, genre);
				break;

			case 3:
				cout<<"Enter the name of the song you want to delete"<<endl;
				cin>>sd;
				del(sd);
				break;
			case 4:
				display_forw();
				break;
			
			case 5:
				display_back();
			    break;
			    
			case 6:
				exit(1);
			default:
				cout<<"Wrong choice"<<endl;
		}
	}
}

void create_playlist(string name, string artist, string genre)
{
	struct node *q,*tmp;
	tmp=new(struct node);
	tmp->name=name;
	tmp->artist=artist;
	tmp->genre=genre;
	tmp->next=NULL;
	tmp->prev=NULL;
		

	if(start==NULL)
		start=tmp;
	else
	{
		q=start;
		while(q->next!=NULL)	q=q->next;
		q->next=tmp;
		tmp->prev=q;
	}
}

void addatend(string name, string artist, string genre)
{
	struct node *q, *tmp;
	tmp=new(struct node);
	tmp->name=name;
	tmp->artist=artist;
	tmp->genre=genre;
	tmp->next=NULL;
	if(start==NULL)
	{
		tmp->prev=NULL;
		start=tmp;
	}
	else{
		q=start;
		while(q->next!=NULL)
		{
			q=q->next;
		}
		tmp->prev=q;
		q->next=tmp;
	}
	
	
}

void del(string name)
{
	struct node *tmp,*q;
	if(start->name==name)
	{
		tmp=start;
		start=start->next;	//first element deleted/
		start->prev=NULL;
		free(tmp);
		return;
	}
	q=start;
	while(q->next->next!=NULL)
	{
		if(q->next->name==name)	       //element deleted in between/
		{
			tmp=q->next;
			q->next=tmp->next;
			tmp->next->prev=q;
			free(tmp);
			return;
		}
		q=q->next;
	}
	if(q->next->name==name)		//last element deleted/
	{
		tmp=q->next;
		free(tmp);
		q->next=NULL;
		return;
	}
	cout<<"Song "<<name<<" not found in the playlist "<<endl;
}

void display_forw()
{
	struct node *q;
	if(start==NULL)
	{
		cout<<"List is empty"<<endl;
		return;
	}
	q=start;
	cout<<"List is:"<<endl;
	while(q!=NULL)
	{
		cout<<q->name<<"   ";
		cout<<q->artist<<"   ";
		cout<<q->genre<<"   ";
		q=q->next;
	}
	cout<<endl;
}

void display_back()
{
	struct node *q;
	end=start;
	while(end->next!=NULL)
	{
		end=end->next;
	}
	if(start==NULL)
	{
		cout<<"List is empty."<<endl;
		return;
	}
	q=end;
	while(q!=NULL)
	{
		cout<<"Song Name:"<<q->name<<" , Artist:"<<q->artist<<" , Genre:"<<q->genre<<endl;
		q=q->prev;
	}
}




=================================================================
Question #2
===================================================================
#include<iostream>
#include<stdlib.h>
using namespace std;
struct node
{
	string pname, country;
	int age;
	struct node *link;
}*last;
void createlist(string pname, string country, int age)
{
	struct node *tmp, *q;
	tmp = new (struct node);
	tmp->pname = pname;
	tmp->country = country;
	tmp->age=age;
	if(last == NULL)
	{
		last=tmp;
		tmp->link=last;
	}
	else{
		
		tmp->link=last->link;
		last->link=tmp;
		last=tmp;

	}
	
}

void addatbeg(string pname, string country, int age)
{
	struct node *tmp;
	tmp=new (struct node);
	tmp->pname=pname;
	tmp->country=country;
	tmp->age=age;
	tmp->link=last->link;
	last->link=tmp;
}

void addafter(string pname, string country, int age, int pos)
{
	struct node *q, *tmp;
	q=last->link;
	for(int i=0; i<pos; i++)
	{
		q=q->link;
		if(q==last->link)
		{
			cout<<" There are less than"<< pos<<" elements "<<endl;
			return;
		}
	}
	tmp = new (struct node);
	tmp->pname=pname;
	tmp->country=country;
	tmp->age=age;
	tmp->link=q->link;
	q->link=tmp;
	if(q==last){
	    last=tmp;
  }
}

void del(string pname) {
    struct node *q, *tmp;

    if (last == NULL) {
        cout << "List is empty" << endl;
        return;
    }

    // Case 1: Deleting the only node in the list
    if (last->link == last && last->pname == pname) {
        tmp = last;
        last = NULL;
        delete tmp;
        return;
    }

    // Case 2: Deleting the first node
    if (last->link->pname == pname) {
        tmp = last->link;
        last->link = tmp->link;
        delete tmp;
        return;
    }

    q = last->link;
    // Traverse the list to find the node to delete
    while (q->link != last) {
        if (q->link->pname == pname) {
            tmp = q->link;
            q->link = tmp->link;
            delete tmp;
            return;
        }
        q = q->link;
    }

    // Case 3: Deleting the last node
    if (last->pname == pname) {
        tmp = last;
        q->link = last->link;
        last = q;
        delete tmp;
        return;
    }

    cout << "Player " << pname << " not found" << endl;
}
void display() {
    struct node *q;
    if (last == NULL) {
        cout << "List is empty" << endl;
        return;
    }

    q = last->link;
    cout << "List is:" << endl;

    do {
        cout << q->pname <<endl;
        cout << q->country <<endl;
		cout << q->age <<endl;
		q = q->link;
    } while (q != last->link);

    cout << endl;

}

int main()
{
	int choice,n,age,position,i;
	string pname,country, m;
	last=NULL;
	while(1)
	{
		cout<<"1. Create List"<<endl;
		cout<<"2. Add at beginning"<<endl;
		cout<<"3. Add after"<<endl;
		cout<<"4. Delete"<<endl;
		cout<<"5. Display"<<endl;
		cout<<"6. Quit"<<endl;

		cout<<"Enter ur choice"<<endl;
		cin>>choice;
		switch(choice)
		{
			case 1:
				cout<<"How many nodes u want:"<<endl;
				cin>>n;
				for(i=0;i<n;i++)
				{
					cin.ignore();
					cout<<"Enter the player name"<<endl;
					getline(cin,pname);
					cout<<"Enter the country of player "<<endl;
					getline(cin,country);
					cin.ignore();
					cout<<"Enter the age of player "<<endl;
					cin>>age;
					createlist(pname, country, age);
				}
				break;
			case 2:
				cin.ignore();
				cout<<"Enter the player name"<<endl;
				getline(cin,pname);
				cout<<"Enter the country of player "<<endl;
				getline(cin,country);
				cin.ignore();
				cout<<"Enter the age of player "<<endl;
				cin>>age;
				addatbeg(pname, country, age);
				break;
			case 3:
				cin.ignore();
				cout<<"Enter the player name"<<endl;
				getline(cin,pname);
				cout<<"Enter the country of player "<<endl;
				getline(cin,country);
				cin.ignore();
				cout<<"Enter the age of player "<<endl;
				cin>>age;
				cout<<"Enter the position after which this element is inserted"<<endl;
				cin>>position;
				addafter(pname, country, age, position);
				break;
			case 4:
				if(last==NULL)
				{
					cout<<"List is empty"<<endl;
					continue;
				}
				cin.ignore();
				cout<<"Enter the name of the player for deletion"<<endl;
				cin>>m;
				del(m);
				break;
			case 5:
				display();
				break;
			case 6:
				exit(1);
			default:
				cout<<"Wrong choice"<<endl;
		}
	}
}